<svg viewBox="0 0 800 900" xmlns="http://www.w3.org/2000/svg">
<!-- SPDX-License-Identifier: CC-BY-SA-4.0 -->
<!-- Copyright © 2025 github.com/dtiberio -->
  <defs>
    <style>
      .box { fill: #f8f9fa; stroke: #495057; stroke-width: 2; rx: 8; }
      .decision { fill: #fff3cd; stroke: #856404; stroke-width: 2; }
      .process { fill: #d1ecf1; stroke: #0c5460; stroke-width: 2; }
      .api-call { fill: #d4edda; stroke: #155724; stroke-width: 2; }
      .text { font-family: 'Arial', sans-serif; font-size: 12px; text-anchor: middle; }
      .small-text { font-family: 'Arial', sans-serif; font-size: 10px; text-anchor: middle; fill: #6c757d; }
      .file-text { font-family: 'Arial', sans-serif; font-size: 10px; text-anchor: middle; fill: #007bff; font-weight: bold; }
      .arrow { stroke: #495057; stroke-width: 2; fill: none; marker-end: url(#arrowhead); }
      .success-arrow { stroke: #28a745; stroke-width: 2; fill: none; marker-end: url(#arrowhead); }
      .warning-arrow { stroke: #ffc107; stroke-width: 2; fill: none; marker-end: url(#arrowhead); }
    </style>
    <marker id="arrowhead" markerWidth="10" markerHeight="7" refX="9" refY="3.5" orient="auto">
      <polygon points="0 0, 10 3.5, 0 7" fill="#495057" />
    </marker>
  </defs>

  <!-- Title -->
  <text x="400" y="25" class="text" style="font-size: 16px; font-weight: bold;">Multi-Turn Function Calling Flow</text>
  
  <!-- User Request -->
  <rect x="320" y="50" width="160" height="40" class="box" />
  <text x="400" y="70" class="text">User Request</text>
  <text x="400" y="83" class="small-text">"Show quarterly sales trends"</text>

  <!-- App.py Entry Point -->
  <rect x="320" y="110" width="160" height="40" class="process" />
  <text x="400" y="130" class="text">handle_chat_with_multiturn()</text>
  <text x="400" y="143" class="file-text">app.py</text>

  <!-- Generate Chat Response -->
  <rect x="300" y="170" width="200" height="40" class="process" />
  <text x="400" y="190" class="text">generate_chat_response()</text>
  <text x="400" y="203" class="file-text">app_helpers.py</text>

  <!-- Step 1 Box -->
  <rect x="50" y="240" width="300" height="180" class="box" style="fill: #e8f5e8;" />
  <text x="200" y="260" class="text" style="font-weight: bold;">STEP 1: Initial API Call</text>
  
  <!-- Step 1 API Call -->
  <rect x="70" y="280" width="160" height="30" class="api-call" />
  <text x="150" y="298" class="text">make_gemini_api_call()</text>
  <text x="150" y="308" class="file-text">app_helpers.py</text>

  <!-- Step 1 Response Processing -->
  <rect x="70" y="330" width="160" height="30" class="process" />
  <text x="150" y="348" class="text">process_gemini_response()</text>
  <text x="150" y="358" class="file-text">app_helpers.py</text>

  <!-- Function Execution -->
  <rect x="250" y="280" width="80" height="80" class="box" style="fill: #fff0f5;" />
  <text x="290" y="300" class="text" style="font-size: 10px;">Data Generation</text>
  <text x="290" y="315" class="text" style="font-size: 10px;">Functions:</text>
  <text x="290" y="330" class="small-text">generate_*_data()</text>
  <text x="290" y="345" class="file-text">data_generators.py</text>

  <!-- Decision Diamond -->
  <polygon points="400,440 460,470 400,500 340,470" class="decision" />
  <text x="400" y="470" class="text" style="font-size: 11px;">Incomplete</text>
  <text x="400" y="483" class="text" style="font-size: 11px;">Workflow?</text>
  <text x="400" y="496" class="file-text">is_incomplete_visualization_workflow()</text>

  <!-- Step 2 Box -->
  <rect x="450" y="540" width="300" height="180" class="box" style="fill: #fff4e6;" />
  <text x="600" y="560" class="text" style="font-weight: bold;">STEP 2: Completion Call</text>
  
  <!-- Build Conversation -->
  <rect x="470" y="580" width="160" height="30" class="process" />
  <text x="550" y="598" class="text">build_completion_conversation()</text>
  <text x="550" y="608" class="file-text">app_helpers.py</text>

  <!-- Step 2 API Call -->
  <rect x="470" y="630" width="160" height="30" class="api-call" />
  <text x="550" y="648" class="text">make_gemini_api_call()</text>
  <text x="550" y="658" class="file-text">(is_completion_call=True)</text>

  <!-- Chart Creation -->
  <rect x="650" y="580" width="80" height="80" class="box" style="fill: #f0f8ff;" />
  <text x="690" y="600" class="text" style="font-size: 10px;">Chart Creation</text>
  <text x="690" y="615" class="text" style="font-size: 10px;">Functions:</text>
  <text x="690" y="630" class="small-text">create_*_chart()</text>
  <text x="690" y="645" class="file-text">chart_functions.py</text>

  <!-- Final Response -->
  <rect x="320" y="760" width="160" height="50" class="box" style="fill: #d4edda;" />
  <text x="400" y="780" class="text">Complete Response</text>
  <text x="400" y="793" class="small-text">Text + Interactive Chart</text>
  <text x="400" y="806" class="file-text">Mixed Content Message</text>

  <!-- Single Step Path -->
  <rect x="50" y="540" width="160" height="40" class="box" style="fill: #e2e3e5;" />
  <text x="130" y="560" class="text">Single-Step Complete</text>
  <text x="130" y="573" class="small-text">(Text Response Only)</text>

  <!-- Arrows -->
  <!-- Main flow down -->
  <line x1="400" y1="90" x2="400" y2="110" class="arrow" />
  <line x1="400" y1="150" x2="400" y2="170" class="arrow" />
  <line x1="400" y1="210" x2="200" y2="240" class="arrow" />
  
  <!-- Step 1 internal flow -->
  <line x1="150" y1="310" x2="150" y2="330" class="arrow" />
  <line x1="230" y1="295" x2="250" y2="295" class="arrow" />
  
  <!-- To decision -->
  <line x1="200" y1="420" x2="400" y2="440" class="arrow" />
  
  <!-- Decision to Step 2 (Yes) -->
  <line x1="460" y1="470" x2="550" y2="540" class="warning-arrow" />
  <text x="510" y="500" class="small-text" style="fill: #856404;">YES</text>
  
  <!-- Decision to Single Step (No) -->
  <line x1="340" y1="470" x2="130" y2="540" class="arrow" />
  <text x="220" y="500" class="small-text">NO</text>
  
  <!-- Step 2 internal flow -->
  <line x1="550" y1="610" x2="550" y2="630" class="arrow" />
  <line x1="630" y1="595" x2="650" y2="595" class="arrow" />
  
  <!-- To final response -->
  <line x1="550" y1="720" x2="400" y2="760" class="success-arrow" />
  <line x1="130" y1="580" x2="400" y2="760" class="arrow" />

  <!-- Logging indicators -->
  <rect x="20" y="800" width="300" height="80" class="box" style="fill: #f8f9fa; stroke-dasharray: 5,5;" />
  <text x="170" y="820" class="text" style="font-weight: bold;">Enhanced Logging Throughout</text>
  <text x="170" y="835" class="file-text">logger_config.py</text>
  <text x="170" y="850" class="small-text">• Function call tracking</text>
  <text x="170" y="863" class="small-text">• Performance metrics</text>
  <text x="170" y="876" class="small-text">• Multi-turn workflow debugging</text>

  <!-- Configuration -->
  <rect x="480" y="800" width="300" height="80" class="box" style="fill: #f8f9fa; stroke-dasharray: 5,5;" />
  <text x="630" y="820" class="text" style="font-weight: bold;">Function Declarations and Config</text>
  <text x="630" y="835" class="file-text">function_declarations.py, app_llm.py</text>
  <text x="630" y="850" class="small-text">• 2-step system instructions</text>
  <text x="630" y="863" class="small-text">• Completion configurations</text>
  <text x="630" y="876" class="small-text">• Chart &amp; data function tools</text>
</svg>